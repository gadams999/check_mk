#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-

#
# (c) 2014 Adams Technology Consulting
#          Gavin Adams <me@gavinadams.org>
#

# This is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  This file is distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# ails.  You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.

# Pulls values from the <<<nest_thermostat>>> section of the special agent
# "agent_nest" in the same checks directory

# Creates temperature checks for all reported thermostats

# Default values are set at "reasonable" extremes for comfortable temperatures
# in celcius. If these are overwritten in Wato, we corect based on the
# temperature scale

nest_temp_default_levels = (0.0, 15.55, 26.7, 32.2, "C")


def nest_temp_parse(info):
    thermostats = {}
    for line in info:
        if line[0].startswith('['):
            name = line[0][1:-1]
            thermostat = {}
            thermostats[name] = thermostat
        else:
            key, value = line
            if key in ["temperature_scale" ]:
                value = str(value)
            elif key in ["ambient_temperature_f", "ambient_temperature_c" ]:
                value = float(value)
            thermostat[key] = value
    return thermostats

def inventory_nest_temp(info):
    thermostats = nest_temp_parse(info)
    return [ (name, {}, "nest_temp_default_levels") for name in thermostats ]

def check_nest_temp(item, params, info):

    critlow, warnlow, warnhigh, crithigh, tempscale = params

    # set warn and crit as both values, low and high, separated by colon
    # perfdata and PNP4Nagios should pick this up

    # Based on tempscale, need to convert F to C

    if tempscale == "F":
        warnlow = (warnlow - 32.0)/1.8
        warnhigh = (warnhigh - 32.0)/1.8
        critlow = (critlow - 32.0)/1.8
        crithigh = (crithigh - 32.0)/1.8

    warn = "%f:%f" % (warnlow, warnhigh)
    crit = "%f:%f" % (critlow, crithigh)
    
    # Process inventory for datasource check
    thermostats = nest_thermostat_parse(info)
    thermostat = thermostats[item]
    
    infotext = ""

    # All values are stored internally as Celsius values, then we use the tempscale
    # for the friendly text (and hopefully for pnp4nagios to display in the correct
    # scale

    if tempscale == "F":
        temp = float(thermostat["ambient_temperature_f"])
        infotext += "%.2f °F" % temp
        # 50 and 95 are for the RRD graph min/max - need to change to Wato
        # convert current temp to Celsius
        temp = float(thermostat["ambient_temperature_c"])
        perfdata = [ ("temp", temp, warn, crit, 10, 35), ("F", 0) ]
    if tempscale == "C":
        temp = float(thermostat["ambient_temperature_c"])
        infotext += "%.2f °C" % temp
        # 10 and 35 are for the RRD graph min/max - need to change to Wato
        perfdata = [ ("temp", temp, warn, crit, 10, 35), ("C", 0) ]

    if temp <= critlow or temp >= crithigh:
        return (2, "CRITICAL - Temperature is %s" % infotext, perfdata)
    if temp <= warnlow or temp >= warnhigh:
        return (1, "WARNING - Temperature is %s" % infotext, perfdata)
    else:
        return (0, "OK - Temperature is %s" % infotext, perfdata)

check_info["nest_temp"] = {
    'check_function':        check_nest_temp,
    'inventory_function':    inventory_nest_temp,
    'service_description':   'Temperature %s',
    'group':                 'nest_temp',
    'has_perfdata':          True,
}

